
%v		--> value
%T		--> Type
%p		--> (addr) / value of pointer



- Variable declaration
	var foo int
	var foo int = 42
	foo := 42
	
Can't redeclare variables, but can shadow them

All variables must be used

Visibility
- lower case first letter for package scope
- upper case first letter to export
- no private scope


- Naming conventions
* 	Pascal or camelCase
	Capitalize acronyms (HTTP, URL)

- As short as reasonable
	longer names for longer lives

- Type conversions
- 	destinationType(variable)
	use strconv package for strings
	
	
STRINGS IN GO ARE aliases FOR BYTES

single unit is not char but uint8


- Immutable, but can be shadowed
- Replaced by the compiler at compile time
= 	Value must be calculable at compile time

- Named like variables
- 	PascalCase for exported constants
- 	camelCase for internal constants

- Typed constants work like immutable variables
* 	Can interoperate only with same type

- Untyped constants work like literals
* 	Can interoperate with similar types

* Enumerated constants
+ 	Special symbol iota allows related constants to be created easily
+ 	Iota starts at 0 in each const block and increments by one

* 	Watch out of constant values that match zero values for variables

* Enumerated expressions
+ 	Operations that can be determined at compile time are allowed\
	Arithmetic
- 	Bitwise operations
	Bitshifting
	
	
	
ARRAYS
	collection of items with same type
	fixed size
	Declaration styles:
		a := [3]int {1,2,3}
		a := [...]int {1,2,3}
		var a [3]int
- 	Access via zero-based index
“ 		a := [3]int {1, 3, 5} // a[1] == 3
	len func returns SIZE of array
	Copies refer to different underlying data
	
SLICES
- 	Backed by array

Creations styles:
	* Slice an existing array or slice
	Literal style
	via make func
		a := make( []int, 10) 		// size and capacity == 10
		
		a := make( []int, 10, 100)	// slice length =10	 &&	 capacity ==100


- len function returns length of slice
+ cap function returns length of underlying array
- append function to add elements to slice
	
	* May cause expensive copy operation if underlying array is too small	(means if capacity of underlying array gets full, then new memory is allocated which is expensive)

- Copies refer to same underlying array

Maps
= Collections of value types that are accessed via keys
- Created via literals or via make function
* Members accessed via [key] syntax
« myMap[“key”] = “value”
= Check for presence with “value, ok” form of result
* Multiple assignments refer to same underlying data			// VVI


Structs
= Collections of disparate data types that describe a single concept
* Keyed by named fields
* Normally created as types, but anonymous structs are allowed
* Structs are value types
* No inheritance, but can use composition via embedding
- Tags can be added to struct fields to describe field

- PANIC
* Occur when program cannot continue at all
	* Don’t use when file can’t be opened, unless it is critical
	* Use for unrecoverable events — cannot obtain TCP port for web server

* Function will stop executing
	 Deferred functions will still fire

* If nothing handles panic, program will exit


If there is a panic situation that you can recover from, then use recover()

- Recover
	* Used to recover from panics
	* Only useful in deferred functions

= Current function will not attempt to continue, but higher functions in call stack will


---------------------------------------------------------------------

POINTERS

- Creating pointers (2 ways)
	Pointer types use an asterisk (*) as a prefix to type pointed to
		*int —a pointer to an integer
	Use the addressof operator (&) to get address of variable
		b := &a

Dereferencing pointers
	Dereference a pointer by preceding with an asterisk(*)
	use * in front of a pointer
	Complex types (structs) are auto dereferenced


Create pointers to objects
- Can use the addressof operator (&) if value type already exists
	*ms := myStruct{foo: 42}
	p := &ms

* Use addressof operator before initializer
	p := &myStruct{foo: 42}

* Use the new keyword
	Can'tinitialize fields at the same time

Types with internal pointers
- All assignment operations in Go are copy operations
* Slices and maps contain internal pointers, so copies point to same underlying data

----------------------------------------------------------------------------------------------------------------

FUNC & METHODS

Parameters

= Comma delimited list of variables and types
+ func foo (bar string, baz int)

= Parameters of same type list type once
+ func foo (bar, baz int)

= When pointers are passed in, the function can change the value in the caller
* This is always true for data of slices and maps

* Use variadic parameters to send list of same types in
	+ Must be last parameter
	* Received as a slice
	+ func foo (bar string, baz ...int)


- Return values
= Single return values just list type
	« func foo() int

= Multiple return value list types surrounded by parentheses
* func foo() (int, error)
* The (result type, error) paradigm is a very common idiom

= Can use named return values
* Initializes returned variable
* Return using "return" keyword on its own

Can return addresses of local variables
	* Automatically promoted from local memory (stack) to shared memory (heap)


* Anonymous functions '''
- Functions don't have names if they are:
	* Immediately invoked
		+ func() {
			...
		}()
	+ Assigned to a variable or passed as 	an argument to a function
		* a := func() {
			...
		} 

		a()

- Functions as types
	* Can assign functions to variables or use as arguments and return values in functions
	- Type signature is like function signature, with no parameter names
		
		- var f func(string, string, int) (int, error)

METHODS
* Function that executes in context of a type
* Format
	* func (g greeter) greet() {
		...
	}

Receiver can be value or pointer
	* Value receiver gets copy of type
	* Pointer receiver gets pointer to type

